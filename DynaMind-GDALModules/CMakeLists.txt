CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7)
PROJECT(dynamind-gdalmodules)
	SET(CMAKE_MODULE_PATH
	"${dynamind-gdalmodules_SOURCE_DIR}/CMake/Packages")

FIND_PATH(DYNAMINDDEV DynaMindDevCmake.txt
	PATHS   $ENV{DYNAMIND_DIR}/include
	PATH_SUFFIXES dynamindcore/CMake)

IF(DYNAMIND_INCLUDE_DIR)
	MESSAGE(STATUS "Compiled from toolbox")
	MESSAGE(STATUS "DYNAMIND_INCLUDE_DIR ${DYNAMIND_INCLUDE_DIR}")
	SET (DYNAMIND_CORE_LIBRARY dynamindcore)
	SET (DYNAMIND_TOOLBOX_LIBRARY dynamindtoolbox)
	SET (DYNAMIND_EXTENSIONS_LIBRARY dynamind-extensions)
	SET (dm_sqlite dm_sqlite)
	MESSAGE(STATUS "${DYNAMIND_CORE_LIBRARY}")
ELSE()
	MESSAGE(STATUS "Compiled from stand alone")
	FIND_PATH(DYNAMINDDEV DynaMindDevCmake.txt
	PATHS $ENV{DYNAMIND_DIR}/include
	PATH_SUFFIXES dynamindcore/CMake)

	IF(DYNAMINDDEV)
		INCLUDE(${DYNAMINDDEV}/DynaMindDevCmake.txt)
	ELSE()
		MESSAGE(FATAL_ERROR "Could not find dynamind. Maybe not installed ?")
	ENDIF()

ENDIF()

IF(USEQT5)
	MESSAGE(STATUS "Using Qt5 for basic modules")
	FIND_PACKAGE(Qt5Core)
	FIND_PACKAGE(Qt5Gui)
	FIND_PACKAGE(Qt5Widgets)
	IF(APPLE)
		INCLUDE_DIRECTORIES(BEFORE /usr/local/opt/qt5/include)
		FIND_PACKAGE(sqlite)
	ELSE()
	# ADD_SUBDIRECTORY(3rdparty/sqlite3)
	ENDIF()
	INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
ELSE()
	IF(APPLE)
		FIND_PACKAGE(sqlite)
	ELSE()
	    # ADD_SUBDIRECTORY(3rdparty/sqlite3)
	ENDIF()
	MESSAGE(STATUS "Using Qt4 for basic modules")
	FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui REQUIRED)
	INCLUDE(${QT_USE_FILE})
ENDIF()

FIND_PACKAGE(GDAL)
FIND_PACKAGE(SFCGAL)

SET(CGAL_DONT_OVERRIDE_CMAKE_FLAGS "ON" CACHE BOOL "")
find_package(CGAL QUIET COMPONENTS Core REQUIRED)
include(${CGAL_USE_FILE})
FIND_PACKAGE(Boost COMPONENTS system thread REQUIRED)

INCLUDE_DIRECTORIES(${GDAL_INCLUDE_DIR})

FIND_PACKAGE(OpenMP)

IF(OPENMP_FOUND)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	MESSAGE(STATUS "OpenMP is enabled")
ELSE()
	ADD_DEFINITIONS(-DOPENMP_DISABLED)
	MESSAGE(STATUS "OpenMP is disabled. Consider using a compiler that supports OpenMP")
ENDIF()

INCLUDE_DIRECTORIES( ${DYNAMIND_INCLUDE_DIR})

IF(CMAKE_BUILD_TYPE STREQUAL Debug)
	MESSAGE(STATUS "Build Type = Debug")
	ADD_DEFINITIONS(-DDEBUG)
ELSE()
	MESSAGE(STATUS "Build Type = Release")
ENDIF()
IF(DYNAMIND_TOOLBOX_BUILD_DIR)
	SET(LIBRARY_OUTPUT_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR}/Modules)
	SET(EXECUTABLE_OUTPUT_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR}/Modules)
	SET(SCRIPT_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR}/PythonModules )
	SET(TEST_DATA_PATH ${DYNAMIND_TOOLBOX_BUILD_DIR}/test_data )
ELSE()
	SET(LIBRARY_OUTPUT_PATH ${dynamind-basicmodules_BINARY_DIR})
	SET(EXECUTABLE_OUTPUT_PATH ${dynamind-basicmodules_BINARY_DIR})
	SET(SCRIPT_PATH ${dynamind-basicmodules_BINARY_DIR}/PythonModules )
	SET(TEST_DATA_PATH ${dynamind-basicmodules_BINARY_DIR}/test_data )
ENDIF()

ADD_SUBDIRECTORY(scripts)
ADD_SUBDIRECTORY(src/standard)
ADD_SUBDIRECTORY(src/spatialite_extensions)

IF(WITH_UNIT_TESTS)
	ADD_SUBDIRECTORY(unit-tests)
	#Add test data
	ADD_SUBDIRECTORY(test_data)
ENDIF(WITH_UNIT_TESTS)

IF (WITH_PLUGIN_GDALDRAINAGE)
	FIND_PACKAGE(GEOS)
	ADD_SUBDIRECTORY(src/drainage)
ENDIF()

ADD_SUBDIRECTORY(3rdparty/swmm)

